{"version":3,"sources":["utils/toCamelCase.js","utils/axios.js","modules/Home/Home.js","modules/index.js","modules/Home/index.js","utils/localStorage.js","modules/Login/index.js","modules/Login/Login.js","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["mapKeys","curry","fn","obj","zipObj","map","keys","values","camelize","str","replace","letter","index","toLowerCase","toUpperCase","toCamelCase","data","is","Array","Object","compose","responseToCamelCase","response","responseContentType","path","equals","JSON","parse","Container","styled","div","_templateObject","Image","img","_templateObject2","modules","component","props","_React$useState","React","useState","_React$useState2","slicedToArray","setData","_React$useState3","_React$useState4","loading","setLoading","useEffect","axios","defaults","baseURL","transformResponse","get","then","key","value","prop","localStorage","setItem","stringify","catch","error","defaultValue","arguments","length","undefined","getItem","e","getStorage","react_default","a","createElement","name","src","Logo","alt","react_router_dom","to","App","className","basename","process","module","react_router","assign","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","addEventListener","warn","toast","notify","preventDefault","prompt","handleNetworkChange","event","onLine","document","body","classList","remove","add","ReactDOM","render","src_App","getElementById","URL","href","origin","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7bf5cd35.chunk.js","sourcesContent":["import {\n  is,\n  compose,\n  curry,\n  keys,\n  map,\n  values,\n  zipObj\n} from 'ramda'\n\nexport let mapKeys = curry((fn, obj) => zipObj(map(fn, keys(obj)), values(obj)))\n\nconst camelize = (str) => {\n  return str\n    .replace(/_/g, ' ')\n    .replace(/-/g, ' ')\n    .replace(/(?:^\\w|[A-Z]|_|\\b\\w)/g, (letter, index) => {\n      return index === 0 ? letter.toLowerCase() : letter.toUpperCase()\n    }).replace(/\\s+/g, '')\n}\n\nconst toCamelCase = (data) => {\n  if (is(Array, data)) {\n    return map(toCamelCase, data)\n  }\n\n  if (is(Object, data)) {\n    return compose(\n      map(toCamelCase),\n      mapKeys(camelize)\n    )(data)\n  }\n\n  return data\n}\n\nexport default toCamelCase\n","import axios from 'axios'\nimport {path, is, equals} from 'ramda'\nimport toCamelCase from './toCamelCase'\n\nconst CONTENT_TYPE_JSON = 'application/json'\n\nconst responseToCamelCase = (data, response) => {\n  const responseContentType = path(['content-type'], response)\n\n  if (equals(CONTENT_TYPE_JSON, responseContentType)) {\n    return toCamelCase(JSON.parse(data))\n  }\n\n  if (is(Object, data) || is(Array, data)) {\n    return toCamelCase(data)\n  }\n\n  return data\n}\n\nexport default () => {\n\n  axios.defaults.baseURL = 'https://swapi.co/api'\n  axios.defaults.transformResponse = [responseToCamelCase]\n\n  return axios\n}","import React from 'react'\nimport axios from '../../utils/axios'\nimport {prop} from 'ramda'\nimport {setStorage, getStorage} from '../../utils/localStorage'\nimport styled from 'styled-components'\nimport Logo from '../../images/logo.png'\nconst Container = styled.div`\n  background-color: #303435;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #FFF;\n  font-size: 30px;\n`\n\nconst Image = styled.img`\n    width: 100%;\n    padding: 20px;\n    box-sizing: border-box;\n`\nconst Home = props => {\n\n  const [data, setData] = React.useState(null)\n  const [loading, setLoading] = React.useState(true)\n\n  React.useEffect(() => {\n    if (!data) {\n      axios().get('/people/1/')\n        .then(response => {\n          const data = prop('data', response)\n          setData(data)\n          setLoading(false)\n          setStorage('data', data)\n        })\n        .catch(error => {\n          setData(getStorage('data'))\n          setLoading(false)\n        })\n    }\n\n  })\n  \n  return (\n    <Container>\n      <div>\n      <div>{data && data.name} {loading && 'Loading...'}</div>\n      <Image src={Logo} alt=\"\"/>\n      </div>\n    </Container>\n  )\n}\n\nexport default Home","import Home from './Home'\nimport Login from './Login'\n\nexport default [Home(), Login()]","import Home from './Home'\n\nexport default () => ({\n  component: Home,\n  path: '/'\n})","export const getStorage = (key, defaultValue = null) => {\n  const value = localStorage.getItem(key)\n\n  if (value) {\n    try {\n      return JSON.parse(value)\n    } catch (e) {}\n  }\n\n  return defaultValue\n}\n\nexport const setStorage = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport const removeStorage = (key) => {\n  localStorage.removeItem(key)\n}\n","import Login from './Login'\n\nexport default () => ({\n  component: Login,\n  path: '/login'\n})","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst Login = props => {\n\n  return (\n    <div>Login\n      <Link to={'/'}>Home</Link>\n    </div>\n  )\n}\n\nexport default Login","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport modules from './modules'\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router  basename={process.env.PUBLIC_URL}>\n        {modules.map((module, key) => {\n          return (\n             <Route\n              key={key}\n              {...module}\n              exact={true}\n            />\n          )\n        })}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport toast from 'toasted-notes'\nimport 'toasted-notes/src/styles.css'\n\nlet deferredPrompt;\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n\tconsole.warn('INSTALLL')\n  toast.notify('Installing')\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n\n  deferredPrompt.prompt();\n\n});\n\nwindow.addEventListener(\"load\", () => {\n  function handleNetworkChange(event) {\n    if (navigator.onLine) {\n      toast.notify('Online')\n      document.body.classList.remove(\"offline\");\n    } else {\n      toast.notify('Offline')\n      document.body.classList.add(\"offline\");\n    }\n  }\n  window.addEventListener(\"online\", handleNetworkChange);\n  window.addEventListener(\"offline\", handleNetworkChange);\n});\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.73f300bf.png\";"],"sourceRoot":""}